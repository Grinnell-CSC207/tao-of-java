<section id="polymorphism-lab"> <title>Laboratory: Polymorphism in Java</title>

<para>
<emphasis>Summary:</emphasis> In today's laboratory, you will explore 
issues of polymorphism in Java.
</para>

<section id="polymorphism-preparation"><title>Preparation</title>

<para>
  a. Fork and clone the repository at
  <code><ulink url="https://github.com/Grinnell-CSC207/lab-polymorphism"/></code>.
</para>

<para>
  b. Import that repository into Eclipse.
</para>

</section>  <!-- polymorphism-preparation -->

<section id="exercises"> <title>Exercises</title>

<section id="polymorphism-01"> <title>Exercise 1: Square Roots</title>

<para>
  a. Scan through <code>MathUtils.java</code> and verify that
  the square root method has the form described in <ulink
  url="../readings/polymorphism.html">the reading</ulink>.
</para>

<para>
  b. Run the <code>main</code> method of <code>MathExpt</code> to see
  that it behaves as expected.
</para>

<para>
  c. Extend the <code>main</code> method of <code>MathExpt</code> so that
  it computes the square root of 
  an <code>Integer</code>, 
  a <code>Float</code>, 
  a <code>Double</code>, 
  a <code>BigInteger</code>, 
  a <code>BigDecimal</code>, and
  a <code>double</code>.
</para>

</section> <!-- Exercise 1 -->

<section id="polymorphism-02"> <title>Exercise 2: Simple Lines</title>

<para>
  As a first step in understanding the layout methods, extend the
  <code>main</code> method of <code>LayoutExpt</code> so that it 
  uses <code>TBUtils.print</code> to print a simple block.   I
  would suggest something like the following.
</para>

<programlisting>
    TextBlock block = new TextLine("This is a test.");
    TBUtils.print(pen,block);
</programlisting>

</section> <!-- polymorphism-02 -->

<section id="polymorphism-03"> <title>Exercise 3: Boxed Text</title>

<para>
  The <ulink url="../readings/polymorphism.html">reading</ulink>, 
  cliams that it is possible to combine text blocks together by
  using one as a parameter to the constructor of another.  (In fact,
  that seems to be the only way to create a <code>BoxedBlock</code>.
  Try creating and printing out each of the following:
</para>

<itemizedlist>
  <listitem>
    a boxed line (of your choice);
  </listitem>
  <listitem>
    a boxed boxed line (of your choice); and
  </listitem>
  <listitem>
    a boxed empty line.
  </listitem>
</itemizedlist>

</section> <!-- polymorphism-03 -->

<section id="polymorphism-04"> <title>Exercise 4: Composing Text</title>

<para>
  The classes <code>HCompose</code> and <code>VCompose</code> permit you
  to compose pairs of text blocks horizontally and vertically.  For
  example, <code>new HCompose(tb1,tb2)</code> makes a text block by
  putting <code>tb1</code> and <code>tb2</code> side-by-side, and
  <code>new VCompose(tb1,tb2)</code> makes a text block by putting
  <code>tb1</code> on top of <code>tb2</code>.
</para>

<para>
  a. Using <code>VCompose</code>, <code>TextLine</code>, and
  <code>BoxedBlock</code>, build the following text block:
</para>

<programlisting>
+-------+
|Hello  |
|Goodbye|
+-------+
</programlisting>

<para>
  b. Using <code>VCompose</code>, <code>TextLine</code>, and
  <code>BoxedBlock</code>, build the following text block:
</para>

<programlisting>
+-----+
|Hello|
+-----+
+-------+
|Goodbye|
+-------+
</programlisting>

<para>
  c. Using <code>HCompose</code>, <code>TextLine</code>, and
  <code>BoxedBlock</code>, build the following block:
</para>

<programlisting>
+-----+Goodbye
|Hello|
+-----+
</programlisting>

<para>
  d. Using <code>HCompose</code>, <code>TextLine</code>, and
  <code>BoxedBlock</code>, build the following block:
</para>

<programlisting>
Goodbye+-----+
       |Hello|
       +-----+
</programlisting>

</section> <!-- polymorphism-04 -->

<section id="polymorphism-05"> <title>Exercise 5: Writing HCompose</title>

<para>
Assume that <code>HCompose</code> has two fields, 
<programlisting>
  TextBlock left;
  TextBlock right;
</programlisting>
</para>

<para>
a. Sketch how you might write 
</para>

<itemizedlist>
  <listitem><code>String row(int rownum)</code>, </listitem>
  <listitem><code>int width()</code>, and </listitem>
  <listitem><code>int height()</code>.  </listitem>
</itemizedlist>

<para>
  You can look at the source code of <code>BoxedBlock</code> for ideas,
  but please do not look at the source code of <code>HCompose</code>.
</para>

<para>
  b. Compare your answer to the source code of <code>HCompose</code>.
</para>

</section> <!-- polymorophism-05 -->

<section id="polymorphism-06"> <title>Exercise 6: Writing VCompose</title>

<para>
  Assume that <code>VCompose</code> has two fields, 
</para>

<programlisting>
  TextBlock top;
  TextBlock bottom;
</programlisting>

<para>
  a. Sketch how you might write 
</para>

<itemizedlist>
<listitem><code>String row(int rownum)</code>, </listitem>
<listitem><code>int width()</code>, and </listitem>
</itemizedlist>

<para>
  You can look at the source code of <code>BoxedBlock</code> and
  <code>HCompose</code> for ideas, but please do not look at the source
  code of <code>VCompose</code>.
</para>

<para>
  b. Compare your answer to the source code of <code>VCompose</code>.
</para>

</section> <!-- polymorphism-06 -->

<section id="polymorphism-07"> <title>Exercise 7: Other Composition Classes</title>

<para>
  Pick one of the following composition mechanisms and implement it as a
  class.
</para>

<para>
  a. <code>Truncate</code>, which, given a text block and a maximum width,
  builds a new block that truncates the input block to that width.
</para>

<para>
  b. <code>Center</code>, which, given a text block and a width, builds
  a new block that centers the block within that width.
</para>

<para>
  c. <code>RightJustify</code>, which, given a text block and a width,
  builds a new block right-justifies the input block within that width.
</para>

</section> <!-- polymorphism-07 -->

</section> <!-- polymorphism-extra -->

<section id="polymorphism-extra"><title>For Those With Extra Time</title>

<section id="polymorphism-extra-01"> <title>Extra 1: Other Compositions</title>

<para>
  Use the various implementations of <code>TextBlock</code> to make an
  <quote>interesting</quote> textual composition.  
</para> 

</section> <!-- polymorphism-extra-01 -->

</section> <!-- polymorphism-extra -->

</section> <!-- Polymorphism -->

