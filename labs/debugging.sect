<section id="debugging-lab"><title>Laboratory: Debugging with Eclipse</title>

<!-- Rewrite so that tests are from experiments, not unit tests. -->

<para>
  <emphasis>Summary</emphasis>: We begin to explore the ways in which
  we can use a debugger to better understand flaws in our code.
</para>

<section id="debugging-preparation"><title>Preparation</title>

<para>
  In the <ulink url="../labs/unit-testing.html">the laboratory on
  unit testing</ulink>, you forked and cloned the repository
  <code><ulink url="https://github.com/Grinnell-CSC207/lab-unit-testing"/></code>.
  You'll work with that same repository.  (So return to the directory if
  you have it, and make a new copy if you don't.)
</para>

</section> <!-- debugging-preparation -->

<section id="debugging-exercises"><title>Exercises</title>

<section id="debugging-01"><title>Exercise 1: Removing A's</title>

<para>
  As you may have noted in the <ulink url="../labs/unit-testing.html">the
  laboratory on unit testing</ulink>, the procedure
  <methodname>SampleMethods.removeAs</methodname> is not quite successful in its
  attempt to remove all copies of the letter 'a' from its parameter
  string.
</para>

<para>
  If you haven't yet written your test cases, here's one.
</para>

<programlisting>
public void testRemoveAs() 
{
  assertEquals("empty string", "", "");
  assertEquals("no as", "hello", "hello");
  assertEquals("eliminate one a", "", SampleMethods.removeAs("a"));
  assertEquals("eliminate many as", "", SampleMethods.removeAs("aaaa"));
  assertEquals("eliminate one a, short string", "pin", 
               SampleMethods.removeAs("pain"));
  assertEquals("eliminate many as, medium string", "lphbet", 
               SampleMethods.removeAs("alphabet"));
  assertEquals("eliminate many as, silly string", "BCDEFGHIJKLMNOPQ",
               SampleMethods.removeAs("aBaaCDaaaEFGaaaaHIJKaaaaLMNaaaOPaaQa"));
  assertEquals("eliminate prefix and suffix as", "bbb",
               SampleMethods.removeAs("aaabbbaaa"));
} // testRemoveAs
</programlisting>

<para>
  You may be able to tell by inspection why the method fails.  But
  let's assume that you don't.
</para>

<para>
  Open the code for <code>removeAs</code> and right click in the grey
  bar to the left of the code to set a breakpoint at the start of the
  method.
</para>

<para>
  Create a new main class that duplicates the failed calls to
  <methodname>removeAs</methodname> from your unit tests.
  Select <guimenu>Run</guimenu> &gt; <guimenuitem>Debug As</guimenuitem>
  &gt; <guimenuitem>Java Application</guimenuitem>.
</para>

<para>
  A dialog box should pop up asking you to confirm switching to the
  Java perspective.
</para>

<para>
  If all goes well, Eclipse should stop at the point that you inserted
  a breakpoint.
</para>

<para>
  a. What do you expect to happen if you click the 
  <guibutton>Resume</guibutton> button - the button that looks like
  a green triangle.  (Note that in the future, you can also hit
  <keycap>F8</keycap>.)
</para>

<para>
  b. Check your answer experimentally.
</para>

<para>
  As you may have noted, Eclipse resumed computation and ran until
  the completion of this program.  (Presumably, with incorrect output.)
  To see the results, you may need to switch back to the Java perspective.
  You can get that perspective by clicking on the downward arrow in the
  upper-right-corner of the screen.
</para>

<para>
  c. Start the program again.  This time, let's single step through
  the procedure, using the <guibutton>Step Over</guibutton> (also
  <keycap>F6</keycap>).  See if you can identify where the code goes wrong.
</para>

<para>
  d. Correct the code to the best of your ability, remove the
  breakpoint, run the unit tests again, and see if your code
  passes all of the tests.
  If so, go on to the next exercise.  If not, repeat the 
  debugging steps until you find the next bug.
</para>

</section> <!-- debugging-01 -->

<section id="debugging-02"><title>Exercise 2: Removing B's</title>

<para>
  The <methodname>removeBs</methodname> procedure has much the same
  goals as <methodname>removeAs</methodname> although it uses a
  different (but still buggy) approach.
</para>

<para>
  Use JUnit and the Eclipse debugger to identify and correct the errors.
</para>

<para>
  <emphasis>Note:</emphasis>
  Your goal is to correct the errors in this approach.  Inserting
  slightly modified code from <methodname>removeAs</methodname> is not
  an acceptable strategy.
</para>

</section> <!-- debugging-02 -->

<section id="debugging-03"><title>Exercise 3: Exponentiation</title>

<para>
  The <methodname>SampleMethods.expt</methodname> method computes
  x<superscript>p</superscript> using a divide-and-conquer approach.
</para>

<itemizedlist>
  <listitem>
    x<superscript>0</superscript> = 1
  </listitem>

  <listitem>
    x<superscript>2k</superscript> = 
    x<superscript>k</superscript> * x<superscript>k</superscript>
  </listitem>

  <listitem>
    x<superscript>2k</superscript> =
    (x<superscript>2</superscript>)<superscript>k</superscript>
  </listitem>

  <listitem>
    x<superscript>k+1</superscript> =
    x * x<superscript>k</superscript>
  </listitem>
</itemizedlist>

<para>
  Some people combine the last two when dealing with an odd exponent.
</para>

<para>
  This approach requires only log<subscript>2</subscript>p
  multiplications to raise x to the pth power, while the naive loop
  requires p multiplications.  (Of course, if you have a book of
  tables, or functions that simulate those tables, you can compute
  x<superscript>p</superscript> in two table lookups.)
</para>

<para>
  It's a nice approach, but have we implemented it correctly?
</para>

<para>
  If you haven't done so already write unit tests for 
  <code><methodname>SampleMethods.expt</methodname>(int,int)</code>.
</para>

<para>
  a. Add the following assertion at the start of your test.
</para>

<programlisting>
assertEquals("1K", 1024, expt(2, 10));
</programlisting>

<para>
  b. Run the test.  It will likely fail.
</para>

<para>
  c. Since the test failed, it will be useful to write a short
  experiment to just do that one call.  
</para>

<programlisting>
/**
 * A quick experiment with the expt method.
 */
import java.io.PrintWriter;

public class ExptExpt
{
  static final int base = 2;
  static final int expt = 10;

  public static void main(String[] args)
      throws Exception
  {
    PrintWriter pen = new PrintWriter(System.out, true);
    pen.println(base + "^" + expt + " = " + SampleMethods.expt(base, expt));
    pen.close();
  } // main(String[])
} // class ExptExpt
</programlisting>

<para>
  c. Set a breakpoint at the start of the <methodname>expt</methodname>
  method.  (Make sure that you choose the right one.  There are two!)
</para>

<para>
  d. Start the debugger.  It should bring you to the first line
  of <methodname>expt</methodname>.
</para>

<para>
  e. What do you expect to happen if you click the 
  <guibutton>Resume</guibutton> button?  (The button that looks like
  a green triangle.)
</para>

<para>
  f. You may have discovered that instead of returning to the call in
  the unit test, the debugger continued executing the code until the
  next call to <code>expt</code>, which is a recursive call.  Hit
  the <guibutton>Resume</guibutton> button another time.
</para>

<para>
  g. You are now three levels deep in the recursive call stack for
  <code>expt</code>.  In the <guilabel>Debug</guilabel> pane, navigate
  between them to see the changing values of <code>x</code> and
  <code>p</code>.
</para>

<para>
  h. Single step through the code to see if you can identify where
  the error occurs.
</para>

<para>
  i. Since intermediate values are not clearly represented in the
  code, you may find it difficult, if not impossible, to quickly
  identify the error.  So what next?  You could explicitly insert
  temporary values for the recursive call.  Instead of calling
  <code>return</code> in each case, you could set a local values
  (e.g., <code>results</code> and then exit in the logical case).
  Or you could get Eclipse to behave better.  
</para>

<para>
  Choose one approach and see if you can identify the error.  Get 
  help if you're not sure which approach you should use or if you
  still can't identify the error after trying additional approaches.
</para>

</section>

</section> <!-- debugging-exercises -->

<section id="debugging-extra"><title>For Those With Extra Time</title>

<section id="debugging-extra-01"><title>Extra 1: Exponentiation, Revisited</title>

<para>
  Consider the <code><methodname>expt</methodname>(double, int)</code>
  method.  As you might have noted, it doesn't work any more correctly
  than the old version of <methodname>expt</methodname>
</para>

<para>
  One issue we <emphasis>may</emphasis> hit in unit testing is that
  doubles are approximate.  Hence, slightly different orders of
  computation can make slight differences in the result (e.g., in
  practice <code>Math.sqrt(2)*Math.sqrt(2)</code> is often not the
  same as <code>Math.sqrt(2*2)</code>, even though they are logically
  the same.
</para>

<para>
  Write appropriate unit tests for this alternate version.  Then determine
  if your corrections from the exercise above suffice.  If not, use the
  debugger to figure out why.
</para>

</section> <!-- debugging-extra-01 -->

</section> <!-- debugging-extra -->

</section> <!-- debugging-lab -->
