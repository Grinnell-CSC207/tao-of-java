<section id="eclipse-lab"> <title>Getting Started with Eclipse</title>

<para>
  <emphasis>Summary</emphasis>: In this laboratory, you will start using
  Eclipse. In particular, you will ccreate your first project in Eclipse.
</para>

<section id="eclipse-preparation"><title>Preparation</title>

<para>
  a. Make sure you have completed and understood <ulink
  url="../readings/eclipse.html">the reading on IDEs and Eclipse</ulink>.
</para>

<para>
  b. Start Eclipse by typing the following in a terminal window.
</para>

<screen>
<prompt>$</prompt> <userinput>eclipse &amp;</userinput> </screen>

<para>
  You may recall that the ampersand means that the program will
  run in the background and you can continue using the terminal
  window.
</para>

<para>
  Alternately, you can start Eclipse by finding the appropriate
  menu item in the <guimenu>Applications</guimenu> menu, which
  looks like a little creature over a blue X under Xfce4.
</para>

</section> <!-- eclipse-preparation -->

<section id="eclipse-exercises"> <title>Exercises</title>

<section id="eclipse-01"> <title>Exercise 1: Your First Program</title>

<para>
  a. Make a new project in Eclipse and call it <code>HelloEclipse</code>.
  From the <guimenu>File</guimenu> menu, select <guimenuitem>New</guimenuitem>,
  and then <guimenuitem>Java Project</guimenuitem>.
</para>

<para>
  b. Create a package in the class that will hold your class files. 
  Name your package <code>introduction</code>.
  If you are not sure how to create a new package, use
  <guimenu>File</guimenu> 
  &gt; <guimenuitem>New</guimenuitem> 
  &gt; <guimenuitem>Package</guimenuitem>.
</para>

<para>
  c. Create a class in the package called <code>HelloJava</code>.  If you are
  not sure how to create a new class, use
  <guimenu>File</guimenu> 
  &gt; <guimenuitem>New</guimenuitem> 
  &gt; <guimenuitem>Class</guimenuitem>.
</para>

<para>
  d. Copy and paste this code into your class.  Make sure that you use
  a package that corresponds to the one you just created.
</para>

<programlisting>
package introduction;

/**
 * A simple introductory Java class.
 */
public class HelloJava 
{
  /**
   * Print a silly message.
   */
  public static void 
    main (String[] args) 
      throws Exception
  {
    System.out.print ("I am the 1337 h4x0r. Phear me!");
  } // main (String[])
} // class HelloJava
</programlisting>

<para>
  e. Run the program and marvel at the words that appear in the console!
</para>

</section> <!-- eclipse-01 -->

<section id="eclipse-02"><title>Exercise 2: Switching Packages</title>

<para>
  a. Create a new package named
  <code>edu.grinnell.csc207.<emphasis>username</emphasis>.intro</code>.
  (You should be using package names like this, so you might as well
  get used to it.)
</para>

<para>
  b. Drag <code>HelloJava</code> from one package to another in the 
  Package Explorer.
</para>

<para>
  c. Observe what happens.
</para>

</section> <!-- eclipse-02 -->

<section id="eclipse-03"><title>Exercise 3: Experiments with Output</title>

<para>
  You've already seen that Java looks a bit like C, except that it's also
  a bit more verbose.  For example, instead of <code>printf</code> with
  a pattern, you use <code>System.out.println</code>.  (In a few days,
  you will stop using <code>System.out</code> and explore other ways to
  do output.)
</para>

<para>
  a. Determine what happens if you have multiple calls to 
  <code>System.out.println</code>.
</para>

<para>
  b. Determine what happens if you use <code>println</code> with an
  integer or real number rather than a string.
</para>

<para>
  c. Determine what happens if you use <code>System.out.print</code> rather
  than <code>System.out.println</code>.
</para>

<para>
  d. Determine what happens when you try to print <code>System.out</code>.
  That is, determine the result of
</para>

<programlisting>
    System.out.println (System.out);
</programlisting>

</section> <!-- eclipse-03 -->

<section id="eclipse-04"> <title>Exercise 4: Your Second Program</title>

<para>
  a. Make another class in your package and call it <code>SimpleMath</code>
</para>

<para>
  b. Using the skeleton from above write a program that computes and
  prints out a simple sum.  For example, your output might be
</para>

<screen>
Adding 3 and 4 gives us 7.</screen>

<para>
  Here's a sketch.
</para>

<programlisting>
    int x = 3;
    int y = 4;
    System.out.print ("Adding ");
    System.out.print (x);
    ...
    System.out.print (x+y);
    System.out.println ();
</programlisting>

<para>   
  Presumably, you wrote this program using a sequence of calls to
  <code>System.out.print</code> and <code>System.out.println</code>.  Can
  we pack it into a single instruction?  
</para>

<para>
  c. Java <quote>overloads</quote> the <code>+</code> operation.
  If you combine two strings with <code>+</code>, you will get a string.
  For example, determine the result of the following instruction.
</para>

<programlisting>
    System.out.println ("Hello" + "World");
</programlisting>

<para>
  d. We saw earlier that <code>System.out.println</code> accepts things other
  than strings, such as integers and reals (and even <code>System.out</code>).
  What about <code>+</code>?  Determine what happens if you combine a string
  and an integer with <code>+</code>.  What about combining an integer
  and a string?
</para>

<para>
  e. Rewrite your instructions to print a sum using just one call to
  <code>System.out.println</code>.
</para>

</section> <!-- eclipse-04 -->

<section id="eclipse-05"><title>Exercise 5: Configuring Eclipse</title>

<para>
  In this course, we will be using <ulink
  url="../handouts/code-conventions.html">a variant of the GNU C code
  conventions, adapted for Java</ulink>.  Of course, one could also
  use other conventions, such as the standard Sun (now Oracle) Java
  Code Conventions.  Eclipse can help if you configure it correctly.
  We'll explore each.
</para>

<para>
  First, select <guimenu>Window</guimenu> &gt; <guimenuitem>Preferences</guimenuitem>.
</para>

<para>
  Next, select <guimenu>Java</guimenu> &gt; <guimenuitem>Code Style</guimenuitem> &gt; <guimenuitem>Formatter</guimenuitem>.
</para>

<para>
  Next, select <guimenuitem>Java Conventions [built-in]</guimenuitem> under
  <guilabel>Active Profile</guilabel>.
</para>

<para>
  Finally, save the new preferences.
</para>

<para>
  Hit <keycap>Shift</keycap>-<keycap>Ctrl</keycap>-<keycap>F</keycap>.
</para>

<para>
  But those are the Java code conventions.  I find them painful.  So
  let's use the course conventions.  (Note: those conventions are under
  development, so I may ask you to update the version you use.)
</para>

<para>
  Select <guimenu>Window</guimenu> &gt; <guimenuitem>Preferences</guimenuitem>
  again.
</para>

<para>
  Click the <guibutton>Import ...</guibutton> button
</para>

<para>
  Navigate to <code>/home/rebelsky/share</code> and select
  <code>CSC207.xml</code>.
</para>

<para>
  Follow the natural steps.
</para>

<para>
  Hit <keycap>Shift</keycap>-<keycap>Ctrl</keycap>-<keycap>F</keycap>.
</para>

</section> <!-- eclipse-05 -->

<section id="eclipse-06"><title>Exercise 6: Hovering</title>

<para>
  a. Hover the cursor over one of the instances of <code>System</code>
  and note what happens.
</para>

<para>
  b. Hover the cursor over one of the instances of <code>out</code> and
  note what happens.
</para>

<para>
  c. Hover the cursor over one of the instances of <code>print</code> or
  <code>println</code> and observe what happens.
</para>

<para>
  d. Hover the cursor over <code>main</code> or <code>HelloJava</code> and
  observe what happens.
</para>

</section> <!-- eclipse-06 -->

</section> <!-- eclipse-exercises -->

<section id="extra"><title>For Those With Extra Time</title>

<section id="eclipse-extra-01"><title>Extra 1: Code Preferences</title>

<para>
  In one of the exercises, you configured Eclipse to format code in a
  certain way.  Eclipse is highly configurable, so you might explore other
  preferences.  Go back to the Formatter preferences and click
  <guibutton>New...</guibutton>.  In the dialog box that appears, select
  the course conventions as the initialization profile and then name
  your preferences.  Click <guibutton>OK</guibutton> and then explore
  the various preferences that you can set.
</para>

</section> <!-- eclipse-extra-01 -->

<section id="eclipse-extra-02"><title>Extra 2: Refactoring</title>

<para>
  You'll note that Eclipse has a <guimenu>Refactor</guimenu>.  Figure
  out what at least one item in that menu does.
</para>

</section> <!-- eclipse-extra-02 -->

</section> <!-- extra -->

</section> <!-- Eclipse Lab -->
