<section id="inheritance-lab"> <title>Laboratory: Inheritance</title>

<para>
  <emphasis>Summary:</emphasis> In today's laboratory, you will explore
  inheritance in Java by building and extending some simple classes.
</para>

<section id="inheritance-prep"><title>Preparation</title>

<para>
  Create an Eclipse Java project for this lab and a Java package in
  that project.  (I'd recommend that you also create a Git repository,
  but it's up to you.)
</para>

</section> <!-- inheritance-prep -->

<section id="inheritance-exercises"> <title>Exercises</title>

<section id="inheritance-01"> <title>Exercise 1: Your Base Class</title>

<para>
  Write a class, <code>Counter</code>, in package
  <code><emphasis>username</emphasis>.util</code>.  The class will allow clients
  to build objects that count things, starting at some value.
</para>

<para>
  The class should contain
</para>

<itemizedlist>
  <listitem>
    Two <code>int</code> fields, 
    <code>count</code> and <code>start</code>.
  </listitem>

  <listitem>
    One constructor that takes a starting value as a parameter.  The
    constructor should initialize both <code>count</code> and
    <code>start</code> to that value.
  </listitem>

  <listitem>
    Four methods: 
    <itemizedlist>
      <listitem>
        <code>increment()</code>, which adds 1 to <code>count</code>
       (note that <code>increment</code> may throw an exception);
     </listitem>
  
      <listitem> 
        <code>reset()</code>, which resets <code>count</code> to
        <code>start</code>;
      </listitem>

      <listitem>
        <code>toString()</code>, which returns a string of the
        form <code>[<emphasis>nnn</emphasis>]</code>];
      </listitem>
  
      <listitem>
        <code>value()</code>, 
        which returns the value of <code>count</code>.
      </listitem>
    </itemizedlist>
  </listitem>

</itemizedlist>

<para>
  Here is a simple, not so systematic, test for that class.
</para>

<programlisting>
  @Test
  public void test() throws Exception 
  {
    Counter alpha = new Counter(0);
    Counter beta = new Counter(123);
    Counter gamma = new Counter(-5);
    assertEquals("original alpha", 0, alpha.value());
    assertEquals("original beta", 123, beta.value());
    assertEquals("original gamma", -5, gamma.value());
    for (int i = 0; i &lt; 10; i++) 
      {
        alpha.increment();
        beta.increment();
        gamma.increment();
      } // for
    assertEquals("updated alpha", 10, alpha.value());
    assertEquals("updated beta", 133, beta.value());
    assertEquals("updated gamma", 5, gamma.value());
    alpha.reset();
    beta.reset();
    gamma.reset();
    assertEquals("reset alpha", 0, alpha.value());
    assertEquals("reset beta", 123, beta.value());
    assertEquals("reset gamma", -5, gamma.value());
  } // test()
</programlisting>

<para>
  And here is an equally simple experiment.
</para>

<programlisting>
import java.io.PrintWriter

/**
 * A simple experiment to allow us to explore our counter class.
 */
public class CounterExpt 
{
  public static void main(String[] args) 
  {
    // Set up output
    PrintWriter pen = new PrintWriter(System.out, true);

    // Set up some counters
    Counter alpha = new Counter(0);
    Counter beta = new Counter(123);
    Counter gamma = new Counter(-5);

    // Print original values
    pen.println("Original alpha = " + alpha);
    pen.println("Original beta = " + beta);
    pen.println("Original gamma = " + gamma);

    // Print incremented values
    alpha.increment();
    beta.increment();
    gamma.increment();
    pen.println("Updated alpha = " + alpha);
    pen.println("Updated beta = " + beta);
    pen.println("Updated gamma = " + gamma);

    // And we're done
    pen.close();
  } // main(String[])
} // class CounterExpt
</programlisting>

</section> <!-- Exercise 1 -->

<section id="inheritance-02"> <title>Exercise 2: Decrementable Counters</title>

<para>
  a. Create a new class, <code>DecrementableCounter</code>, that has
  the following form:
</para>

<programlisting>
public class DecrementableCounter 
  extends Counter 
{
  public DecrementableCounter(int start) 
  {
    super(start);
  } // DecrementableCounter(int)
} // class DecrementableCounter
</programlisting>

<para>
  b. Change the initialization of <code>gamma</code> so that it reads
</para>

<programlisting>
    Counter gamma = new DecrementableCounter(-5);
</programlisting>

<para>
  c. What effect to you expect this change to have on the tests or
  experiments?
</para>

<para>
  d. Check your answer experimentally.
</para>

<para>
  e. Add a <code>decrement()</code> method to
  <code>DecrementableCounter</code>  This method should subtract one
  from the <code>count</code> field.
</para>

<para>
  f. What do you expect to happen if we add the following line to our 
  test?
</para>

<programlisting>
    gamma.reset();
    assertEquals("reset gamma", -5, gamma.value());
    gamma.decrement();
    assertEquals("decremented gamma", -6, gamma.value());
</programlisting>

<para>
  g. Check your answer experimentally.
</para>

<para>
  h. Change the declaration of <code>gamma</code> to
</para>

<programlisting>
    DecrementableCounter gamma = new DecrementableCounter(-5);
</programlisting>
 
<para>
  What effect do you expect this change to have?
</para>

<para>
  i. Check your answer experimentally.
</para>

<para>
  j. Change the initialization of <code>gamma</code> so that it reads
</para>

<programlisting>
    DecrementableCounter gamma = new Counter(-5);
</programlisting>

<para>
  k. What effect to you expect this change to have?  
</para>

<para>
  l. Check your answer experimentally.
</para>

<para>
  m. Restore the initialization of <code>gamma</code> to
</para>

<programlisting>
    DecrementableCounter gamma = new DecrementableCounter(-5);
</programlisting>

<para>
  n. Summarize what you learned in this exercise.
</para>

</section> <!-- inheritance-02 -->

<section id="inheritance-03"> <title>Exercise 3: Naming Counters</title>

<para>
  a. Create a new class, <code>NamedCounter</code>, that has the
  following form
</para>

<programlisting>
public class NamedCounter 
  extends Counter 
{
  String name;
  public NamedCounter(String name, int start) 
  {
    super(start);
    this.name = name;
  } // NamedCounter(String, int)
} // class NamedCounter 
</programlisting>

<para>
  b. Update your test and experiment so that the initialization of
  <code>alpha</code> reads
</para>

<programlisting>
    Counter alpha = new NamedCounter("alfa", 0);
</programlisting>

<para>
  c. What effect do you expect this change to have?
</para>

<para>
  d.  Check your prediction experimentally.
</para>

<para>
  e. Override the <code>toString</code> method by inserting the following
  code into <code>NamedCounter</code>.
</para>

<programlisting>
  @Override
  public String toString()
  {
    return this.name + super.toString();
  } // toString()
</programlisting>

<para>
  f. What effect do you expect this change to have?
</para>

<para>
  g. Check your prediction experimentally.
</para>

<para>
  h. Swap the two lines in the constructor for <code>NamedCounter</code>
  and determine what errors, if any, you get.  
</para>

<para>
  i. Restore the constructor.
</para>

<para>
  j. Summarize what you've learned from this exercise.
</para>

</section> <!-- inheritance-03 -->

<section id="inheritance-04"><title>Exercise 4: Named Counters, Revisited</title>

<para>
  a. What effect do you expect if we have <code>NamedCounter</code>
  extend <code>DecrementableCounter</code> instead of 
  <code>Counter</code>?  For example, will we still be able to write
  the following declaration?
</para>

<programlisting>
    Counter alpha = new NamedCounter("alfa", 0);
</programlisting>

<para>
  b. Check your answer experimentally.
</para>

<para>
  c. Add a call to <code>System.err.println</code> to each of the
  constructors so that you can observe their effect.  For
  example, you might change the <code>NamedCounter</code>
  constructor to read as follows.
</para>

<programlisting>
  public NamedCounter(String name, int start) 
  {
    super(start);
    System.err.println("NamedCounter(\"" + name + "\", " + start + ")");
    this.name = name;
  } // NamedCounter(String, int)
} // class NamedCounter 
</programlisting>


<para>
  What do you expect to see as output when your create <code>alpha</code>?
</para>

<para>
  d. Check your answer experimentally.
</para>

<para>
  e. Summarize what you learned from this exercise.
</para>

</section> <!-- inheritance-04 -->

<section id="inheritance-05"> <title>Exercise 5: Double Counters</title>

<para>
  a. Create a new class, <code>DoubleCounter</code>, that has the
  following form
</para>

<programlisting>
public class DoubleCounter 
  extends Counter 
{
} // class DoubleCounter 
</programlisting>

<para>
  b. What do you expect to happen when you compile this class?
</para>

<para>
  c. Check your answer experimentally.
</para>

<para>
  d. Insert a constructor for <code>DoubleCounter</code> of the
  following form
</para>

<programlisting>
  public DoubleCounter(int start) 
  {
    super(start);
  } // DoubleCounter(int)
</programlisting>

<para>
  e. Update your experiment so that the initialization of
  <code>beta</code> reads
</para>

<programlisting>
  Counter beta = new DoubleCounter(123);
</programlisting>

<para>
  f. What effect do you expect this change to have on your tests or experiments?
</para>

<para>
  g. Check your prediction experimentally.
</para>

<para>
  h. Override the <code>increment</code> method by inserting the following
  code into <code>DoubleCounter</code>
</para>

<programlisting>
  @Override
  public void increment() 
  { 
    super.increment();
    super.increment();
  } // increment()
</programlisting>

<para>
  i. What effect do you expect this change to have on your tests and experiments?
</para>

<para>
  j. Check your prediction experimentally.
</para>

<para>
  k. Summarize what you've learned from this experiment.
</para>

</section> <!-- inheritance-05 -->

<section id="inheritance-06"> <title>Exercise 6: Limited Counters</title>

<para>
  a. Create a subclass of <code>Counter</code> called
  <code>LimitedCounter</code> that includes
</para>

<itemizedlist>
  <listitem>
    an <code>int</code> field named <code>limit</code>;
  </listitem>
 
  <listitem>
    a constructor that takes two parameters: a starting value and
    an upper limit (that is, a value for the <code>limit</code> field); 
    and
  </listitem>

  <listitem>
    a modified <code>increment</code> method that throws an exception
    when <code>count</code> exceeds limit.
  </listitem>
</itemizedlist>

<para>
  b. In your test, determine the results of changing the initialization of 
  <code>gamma</code> to
</para>

<programlisting>
  Counter gamma = new LimitedCounter(-5,3);
</programlisting>

<para>
  c. Summarize what you've learned from this experiment.
</para>

</section> <!-- inheritance-06 -->

</section> <!-- inheritance-exercises -->

</section> <!-- inheritance-lab -->
