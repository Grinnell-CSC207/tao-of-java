<section id="numbers"><title>Laboratory: Some Basic Types</title>

<para>
  <emphasis role="strong">Summary</emphasis>: In this laboratory, you 
  will extend your knowledge of some basic types in Java: Numbers ,
  Strings, and such.
</para>

<para>
  <emphasis role="strong">Some Useful Classes</emphasis>:
</para>

<itemizedlist>
  <listitem>
    <ulink url="&javaapi;/java/lang/Double.html"><code>java.lang.Double</code></ulink>
  </listitem>

  <listitem>
    <ulink url="&javaapi;/java/lang/Float.html"><code>java.lang.Float</code></ulink>
  </listitem>

  <listitem>
    <ulink url="&javaapi;/java/lang/Integer.html"><code>java.lang.Integer</code></ulink>
  </listitem>

  <listitem>
    <ulink url="&javaapi;/java/lang/Long.html"><code>java.lang.Long</code></ulink>
  </listitem>

  <listitem>
    <ulink url="&javaapi;/java/lang/Short.html"><code>java.lang.Short</code></ulink>
  </listitem>

  <listitem>
    <ulink url="&javaapi;/java/math/BigDecimal.html"><code>java.math.BigDecimal</code></ulink>
  </listitem>

  <listitem>
    <ulink url="&javaapi;/java/math/BigInteger.html"><code>java.math.BigInteger</code></ulink>
  </listitem>

  <listitem>
    <ulink url="&javaapi;/java/lang/Math.html"><code>java.lang.Math</code></ulink>
  </listitem>

  <listitem>
    <ulink url="&javaapi;/java/lang/String.html"><code>java.lang.String</code></ulink>
  </listitem>

  <listitem>
    <ulink url="&javaapi;/java/lang/StringBuffer.html"><code>java.lang.StringBuffer</code></ulink>
  </listitem>
</itemizedlist>

<section id="basic-types-preparation"><title>Preparation</title>

<para>
  Create a new project for this lab.  Create a new package called
  <code>taojava.labs.basics</code>.
</para>

</section>

<section id="exercises"><title>Exercises</title>

<section id="basic-types-01"><title>Exercise 1: Limits on Integer Values</title>

<para>
  a. Read the documentation for the various class forms of integers and
  write a main class that prints out the largest and smallest legal
  value for <code>int</code> and <code>long</code>.  For example, to
  print out the largest <code>int</code>, you would use something like:
</para>

<programlisting>
    pen.print ("Largest int: ");
    pen.println (Integer.MAX_VALUE);
</programlisting>

<para>
  b. Determine experimentally what happens when you add 1, 2, 5, and 100 each largest legal value.  Note that you may get some strange results because, well, it doesn't make a lot of sense to add beyond the largest value.
</para>

<para>
  c. Determine experimentally what happens when you subtract 1, 2, 5, and 100 from each smallest legal value.
</para>

</section>  <!-- basic-types-01 -->

<section id="basic-types-02"><title>Exercise 2: Limits on Real Values</title>

<para>
  a. Determine experimentally the smallest positive non-zero float value you can represent.
</para>

<para>
  b. Read the documentation for <ulink
  url="&javaapi;/java/lang/Float.html"><code>java.lang.Float</code></ulink>
  and see if it provides further guidance on what values are
  representable.
</para>

</section>  <!-- basic-types-02 -->

<section id="basic-types-03"><title>Exercise 3: Square Roots and Approximations</title>

<para>
  You may recall that in a previous course, you answered the following
  question when you first explored numeric computation:
</para>

<blockquote>
Have DrScheme compute the square of the square root of 2 and subtract 2 from the result. Ideally, the difference should be 0; why isn't it? How big is the difference?
</blockquote>

<para>
  Redo this exercise in Java, using doubles for the computation.  
</para>

<para>
  Note that <code>java.lang.Math.sqrt</code> is useful for computing
  square roots.
</para>

</section>  <!-- basic-types-03 -->

<section id="basic-types-04"><title>Exercise 4: Other Cool Math Functions</title>

<para>
  Read the documentation for <ulink
  url="&javaapi;/java/lang/Math.html"><code>java.lang.Math</code></ulink>
  and summarize for yourself what methods are available.
</para>

</section>  <!-- basic-types-04 -->

<section id="basic-types-05"><title>Exercise 5: Manipulating Strings</title>

<para>
  a. Create a new main class, <code>Exercise5</code>, for this exercise.
</para>

<para>
  b. As you may note from the documentation for <code>java.lang.String</code>,
  Java strings have a <methodname>concat</methodname> operation.
  What do you expect the result of the following instructions to be?
</para>

<programlisting>
    PrintWriter pen = new PrintWriter (System.out, true);
    String greeting = "Hello ";
    pen.println (greeting.concat ("World"));
    pen.println (greeting);
</programlisting>

<para>
  c. Check your answer experimentally.  What does the result suggest
  about strings in Java?
</para>

<para>
  d. Strings in Java also contain a few <code>replace</code> methods.
  What do you expect the result of the following instructions to be?
  (We'll assume you still have the <code>PrintWriter</code> from the
  earlier subexercise.)
</para>

<programlisting>
   String word = "alphabet";
   pen.println (word.replace ('a', 'A'));
   pen.println (word);
</programlisting>

<para>
  e. Check your answer experimentally.  What does the result suggest
  about strings in Java?
</para>

</section> <!-- basic-types-05 -->

<section id="basic-types-06"><title>Exercise 6: String Buffers</title>

<para>
  In addition to <code>java.lang.String</code>, Java also provides
  an alternative called <code>java.lang.StringBuffer</code>.  (You should
  be able to guess why after the previous exerciss.)  <code>StringBuffer</code>
  objects provide some similar methods to those we just explored, although
  with slightly different semantics or names (or both).
</para>

<para>
  You can either create a new main class for this exercise, or reuse
  one from the previous exercise.
</para>

<para>
  a. What do you expect the result of the following instructions to be?
</para>

<programlisting>
    StringBuffer buffer = new StringBuffer ("This is a StringBuffer");
    pen.println (buffer);
</programlisting>

<para>
  b. Check your answer experimentally.  What does the result suggest
  about string buffers in Java?
</para>

<para>
  c.  What do you expect the result of the following instructions to be?
</para>

<programlisting>
    StringBuffer hello = new StringBuffer ("Hello ");
    pen.println (hello.append ("World"));
    pen.println (hello);
</programlisting>

<para>
  d. Check your answer experimentally.  What does the result suggest
  about string buffers in Java?
</para>

<para>
  e. Let's explore the <methodname>replace</methodname> method.
  What do you expect the result of the following instructions to be?
</para>

<programlisting>
   StringBuffer text = "alphabet";
   pen.println ((text.replace (0, 0, "A")));
   pen.println (text);
   pen.println ((text.replace (2, 3, "A")));
   pen.println (text);
   pen.println ((text.replace (8, 9, "A")));
   pen.println (text);
</programlisting>

<para>
  f. Check your answer experimentally.  What does the result suggest
  about string buffers in Java?
</para>

</section> <!-- basic-types-06 -->

<section id="basic-types-07"><title>Exercise 7: Assigning Strings</title>

<para>
  You can either create a new main class for this exercise, or reuse
  one from the previous exercise.
</para>

<para>
  a. What do you expect the result of the following instructions to be?
</para>

<programlisting>
    PrintWriter pen = new PrintWriter (System.out, true);
    String str = "Hello ";
    StringBuffer buf = new StringBuffer ("Hello ");

    // Create another name for str
    String alt = str;
    pen.println ("alt: " + alt);

    // Update str
    str = str + "world";
    pen.println ("str: " + str);
    pen.println ("alt: " + alt);

    // Create another name for buf
    StringBuffer stf = buf;
    pen.println ("stf: " + stf);

    // Update the buffer.
    buf.append ("world");
    pen.println ("buf: " + stf);
    pen.println ("stf: " + stf);

    // Extract info from the buffer
    alt = buf.toString ();

    // Update the buffer.
    buf.append (".  Are we done yet?");
    pen.println ("buf: " + stf);
    pen.println ("alt: " + stf);
</programlisting>

<para>
  b. Check your answer experimentally.
</para>

</section> <!-- basic-types-07 -->

<section id="basic-types-08"><title>Exercise 8: String Methods</title>

<para>
  Read through the documentation for <code>java.lang.String</code> and
  <code>java.lang.StringBuffer</code> and make a note of at least three
  interesting and useful procedures that we have not yet covered in this
  lab.
</para>

</section> <!-- basic-types-08 -->

<section id="basic-types-09"><title>Exercise 9: Segmenting Strings</title>

<para>
  Programmers often find it convenient to store compound data in a text
  file with one line per entry.  To separate the components of the entry,
  they use some designated symbol, such as a colon.  For example, we might
  store information on ratings of movies with a format like
</para>

<programlisting>
rater-lname:rater-fname:movie:rating:maxrating
</programlisting>

<para>
  with sample entries of
</para>

<programlisting>
Ebert:Roger:Bedazzled:5:5
Siskel:Gene:Bedazzled:4:5
Rebelsky:Samuel:Satyricon:0:5
Rebelsky:Samuel:Playtime:5:5
Rebelsky:Samuel:Bedazzled:6:5
</programlisting>

<para>
  Write a method that takes one line of the given form, segments it
  into its components, and returns a string in human-readable form.
  For example, for the first line above, it might return the
  string <quote>Roger Ebert gave Bedazzled 5 on a 5-point scale</quote>.
</para>

<para>
  In approaching this, you may find it easiest to see if you can build
  a string with just the last name, then add the first name, then
  the movie, and so on and so forth.
</para>

<para>
  Note that you should use <code>indexOf</code> to find the index of the
  colon and then <code>substring</code> to extract the appropriate portion.
</para>

</section>  <!-- basic-types-09 -->

</section> <!-- basic-types-exercises -->

</section> <!-- basic-types -->
