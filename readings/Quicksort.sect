<section id="Quicksort-reading"><title>Quicksort</title>

<para>
  <emphasis>Summary:</emphasis> We consider Quicksort, an interesting
  divide-and-conquer sorting algorithm.
</para>

<section id="alternative-divides"><title>Alternative Strategies for Dividing Lists</title>

<para>
  As you may recall, the two key ideas in merge sort are:
  (1) use the technique known as of <emphasis>divide and
  conquer</emphasis> to divide the list into two halves (and
  then sort the two halves); (2) merge the halves back together.
</para>

<para>
  Are there better sorting algorithms than merge
  sort?  If our primary activity is to compare
  values, we cannot do better than some constant times
  <varname>n</varname>log<subscript>2</subscript><varname>n</varname>
  steps in the sorting algorithm.  However, that hasn't stopped computer
  scientists from exploring alternatives to merge sort.  One reason to
  look for better versions is that merge sort is an <quote>out of place</quote>
  sorting algorithm - you need to create new arrays in order to do the
  merge.  (The obvious merge algorithm requires another array of the same
  size as the original.  Some clever techniques allow you to get by with 
  another array of half the size of the original.)  Another reason to
  look at alternatives is actual, rather than theoretical, speed.  In
  practice, the constant multiplier hidden by big-O notation makes a big 
  difference.  And so we might want to reduce that multiplier.
</para>

<para>
  One way to develop an alternative to merge sort is to split the
  values in the list in a more deliberate way.  For example, instead of
  splitting into <quote>about half the elements</quote> and <quote>the remaining
  elements</quote>, we might choose the to divide into <quote>the smaller
  elements</quote> and <quote>the larger elements</quote>.
</para>

<para>
  Why would this strategy be better?  Well, if we know that every small
  element precedes every large element, then we can significantly
  simplify the merge step.  For lists, we can just append the two sorted
  lists together.  For arrays, we can sort <emphasis>in place</emphasis>
  by rearranging the array so that small elements have small indices and
  large elements have large indices, and then sort the two halves.
</para>

<literallayout>// Sort the whole array, using order to compare elements
Algorithm: sort(A, order)
  sort(A, 0, A.length, order)

// Sort elements [lb..ub) of A using order to compare elements
Algorithm: sort(A, lb, ub, order) 
  if ub-lb &lt;= 1
    // Do nothing!  Subarrays of length 1 or 0 are sorted
  otherwise
    Rearrange the elements so that we achieve the criterion that
      all elements in indices less than mid are small and all elements
      in indices greater than mid are large.  In more formal notation
        For all lb &lt;= i &lt; mid &lt; j &lt; ub
          A[i] &lt;= A[mid] &lt; A[j]
     sort(A, lb, mid)
     sort(A, mid+1, ub)</literallayout>

<para>
  How do we identify the smaller and larger elements?  How do we identify
  the midpoint?  Ideally, we would identify the median value of the
  subarray, put that at mid, and rearrange so that values less than
  the median appear to the left of mid and values to the right appear to
  the right.
</para>

<para>
  It may help to think about this algorithm in terms of lists.
</para>

<literallayout>// Sort a list
Algorithm: sort(L, order)
  if the length of L &lt;= 1
    return L
  otherwise
    let m be the median value of the list
    append(sort(elementsSmallerThan(L, m, order)),
           sort(elementsEqualTo(L, m, order)),
           sort(elementsGreaterThan(L, m, order)))</literallayout>

</section> <!-- id="alternative-divides" -->

<section id="small-and-large"><title>Identifying Small and Large Elements</title>

<para>
  It sounds like a great idea, doesn't it?  Instead of
  <function>split</function> and <function>merge</function>, we
  can sort by identifying the median and reorganizing the values into
  small and large elements.
</para>

<para>
  Unfortunately, the typical way that people identify the median of
  a collection of values is to sort the values and look in the middle.
  That doesn't work so well if we're identifying the median in order
  to sort.  So we need another approach.
</para>

<para>
  So, what do we do?  A computer scientist named C. A. R. Hoare had
  an interesting suggestion: <emphasis>Randomly pick some element of
  the list and use that as a simulated median.</emphasis>  That is,
  anything smaller than that element is <quote>small</quote> and anything
  larger than that element is <quote>large</quote>.  Because it's not the
  median, we need another name for that element.  Traditionally, we call
  it the <emphasis>pivot</emphasis>.  Is using a randomly-selected pivot
  a good strategy?  You need more probability and statistics than most
  of us know to prove formally that it works well.  However, practice
  suggests that it works very well, indeed.  (It works even better if you
  randomly pick three elements and let the median of those three elements
  be the pivot.)
</para>

</section> <!-- id="small-and-large" -->

<section id="partitioning"><title>Partitioning</title>

<para>
  We know how to find a pivot.  For the list-based version, it's pretty
  easy to find the smaller and larger elements: We just iterate through
  the list, grabbing the elements that meet the appropriate criterion.
</para>

<programlisting>
List small;
List medians;
List large;
for (v : L) {
    int o = order.compare(v, p);
    if (o &lt; 0) {
         small.append(v);
    } else if (o == 0) {
         medians.append(v);
    } else {
         large.append(v);
    } // if/else
} // for (v : L)
</programlisting>

<para>
  What about for the array-based version?  Hmmm ... this seems like something
  closely related to the Dutch National Flag problem, doesn't it?  And so
  we can use a similar approach.  The only difference is that we really only
  need two sections, rather than three.  The typical implementation leaves
  the pivot in element 0 while rearranging, and swaps it into the correct
  place only after all the elements have been processed.  Visually, the
  invariant looks like the following:
</para>

<programlisting>
+--+-----------------+--------------------+----------------+
| p| values &lt;= pivot | unprocessed values | values &gt; pivot |
+--+-----------------+--------------------+----------------+
|  |                 |                    |                |
lb lb+1              small                large            ub
</programlisting>

<para>
  Here's the state at the end of the loop.
</para>

<programlisting>
+--+-----------------+----------------+
| p| values &lt;= pivot | values &gt; pivot |
+--+-----------------+----------------+
|  |                 |                |
lb lb+1              small,large      ub
</programlisting>

<para>
  We can then swap the pivot into the end of the small section and
  achieve our goal.
</para>

</section> <!-- partitioning -->

<section id="Quicksort-analysis"><title>Analysis</title>

<para>
  As noted above, the formal analysis of Quicksort is beyond the scope
  of this course.  However, if you believe the claim that <quote>the
  randomly selected pivot usually divides the array relatively evently</quote>,
  then we can use the same analysis that we used for merge sort.  And so
  the algorithm is O(n*log<subscript>2</subscript>n).
</para>

<para>
  Of course, if we choose our pivots badly, then Quicksort devolves to
  an O(n<superscript>2</superscript>) algorithm, since each partition is
  O(n), and a badly chosen pivot means that the recursive call is on an
  array of size n-1.  Note that Quicksort devolves to this behavior if
  you use the first element of the subarray as a pivot and the original
  array is sorted (or reverse sorted).
</para>

</section> <!-- Quicksort-analysis -->

<section id="key-ideas"><title>Key Ideas</title>

<para>
  As we hope you  noted, there are two key ideas in the design of
  Quicksort.  First, as we learned in designing merge sort, using 
  <emphasis>divide and conquer</emphasis> helps us achieve a faster 
  soritng algorithm.  Quicksort adds the new idea that we can sometimes
  leverage randomness to achieve our goals.
</para>

<para>
  This exploration of Quicksort may have also reemphasized some other
  more general ideas.  For example, you might have noted that loop 
  invariants can help us design parts of our algorithm or that the
  algorithms we write for lists and arrays are likely to be different.
  You may have also noted some utility for higher-order procedures
  here, something that Java currently lacks.
</para>

</section> <!-- Quicksort-key-ideas-->

<section id="partitioning-revisited"><title>Partitioning, Revisited</title>

<para>
  Here's an example of partitioning in action.  Supose we start with
  the following array.
</para>

<programlisting>
0   1   2   3   4   5   6   7   8   9   10  11  12  
+---+---+---+---+---+---+---+---+---+---+---+---+
|  a|  l|  p|  h|  a|  b|  e|  t|  i|  c|  a|  l|
+---+---+---+---+---+---+---+---+---+---+---+---+
|                                               |   
lb                                              ub  
</programlisting>

<para>
  We pick a random pivot.  Let's say that it's <quote>h</quote>, which
  is at position 3.  We swap the pivot to the start of the array so that
  we always know where it is.
</para>

<programlisting>
0   1   2   3   4   5   6   7   8   9   10  11  12  
+---+---+---+---+---+---+---+---+---+---+---+---+
|  h|  l|  p|  a|  a|  b|  e|  t|  i|  c|  a|  l|
+---+---+---+---+---+---+---+---+---+---+---+---+
|   |                                           |   
lb  sm                                          ub,lg
</programlisting>

<para>
  The first unprocessed element is <code>vals[1]</code>, or
  <quote>l</quote>, which is large.  So we swap it to the end of the array,
  and update our indication of where the large elements are.
</para>

<programlisting>
0   1   2   3   4   5   6   7   8   9   10  11  12  
+---+---+---+---+---+---+---+---+---+---+---+---+
|  h|  l|  p|  a|  a|  b|  e|  t|  i|  c|  a|  l|
+---+---+---+---+---+---+---+---+---+---+---+---+
|   |                                       |   |   
lb  sm                                      lg  ub  
</programlisting>

<para>
  Cleverly, we swapped an <quote>l</quote> with an <quote>l</quote>,
  so it's not necessarily obvious what happened.  Nonetheless, we move
  forward.  The next unprocessed element is <code>vals[1]</code>, an
  <quote>l</quote>, which is large.  So we swap it to the end of the
  unprocesed elements, and update our indication of where the large
  elements are.
</para>

<programlisting>
0   1   2   3   4   5   6   7   8   9   10  11  12  
+---+---+---+---+---+---+---+---+---+---+---+---+
|  h|  a|  p|  a|  a|  b|  e|  t|  i|  c|  l|  l|
+---+---+---+---+---+---+---+---+---+---+---+---+
|   |                                   |       |   
lb  sm                                  lg      ub  
</programlisting>

<para>
  The next unprocessed element is still <code>vals[1]</code>, or
  <quote>a</quote>.  This time
  it's small, so we advance our upper boundary on small elements.
</para>

<programlisting>
0   1   2   3   4   5   6   7   8   9   10  11  12  
+---+---+---+---+---+---+---+---+---+---+---+---+
|  h|  a|  p|  a|  a|  b|  e|  t|  i|  c|  l|  l|
+---+---+---+---+---+---+---+---+---+---+---+---+
|       |                               |       |   
lb      sm                              lg      ub  
</programlisting>

<para>
  The next unprocessed element is <code>vals[2]</code>, or <quote>p</quote>.
  It's large, so we swap it to the end of the unprocessed section.
</para>

<programlisting>
0   1   2   3   4   5   6   7   8   9   10  11  12  
+---+---+---+---+---+---+---+---+---+---+---+---+
|  h|  a|  c|  a|  a|  b|  e|  t|  i|  p|  l|  l|
+---+---+---+---+---+---+---+---+---+---+---+---+
|       |                           |           |   
lb      sm                          lg          ub  
</programlisting>

<para>
   The next unprocessed elmenet is small.  We advance our small
   boundary.
</para>

<programlisting>
0   1   2   3   4   5   6   7   8   9   10  11  12  
+---+---+---+---+---+---+---+---+---+---+---+---+
|  h|  a|  c|  a|  a|  b|  e|  t|  i|  p|  l|  l|
+---+---+---+---+---+---+---+---+---+---+---+---+
|           |                       |           |   
lb          sm                      lg          ub  
</programlisting>

<para>
   The next unprocessed element is small.  We advance our small
   boundary.
</para>

<programlisting>
0   1   2   3   4   5   6   7   8   9   10  11  12  
+---+---+---+---+---+---+---+---+---+---+---+---+
|  h|  a|  c|  a|  a|  b|  e|  t|  i|  p|  l|  l|
+---+---+---+---+---+---+---+---+---+---+---+---+
|               |                   |           |   
lb              sm                  lg          ub  
</programlisting>

<para>
  The next few unprocessed elements are small.  We advance our small
  boundary.
</para>

<programlisting>
0   1   2   3   4   5   6   7   8   9   10  11  12  
+---+---+---+---+---+---+---+---+---+---+---+---+
|  h|  a|  c|  a|  a|  b|  e|  t|  i|  p|  l|  l|
+---+---+---+---+---+---+---+---+---+---+---+---+
|                           |       |           |   
lb                          sm      lg          ub  
</programlisting>

<para>
  We've encountered another large element.  We swap.
</para>

<programlisting>
0   1   2   3   4   5   6   7   8   9   10  11  12  
+---+---+---+---+---+---+---+---+---+---+---+---+
|  h|  a|  c|  a|  a|  b|  e|  i|  t|  p|  l|  l|
+---+---+---+---+---+---+---+---+---+---+---+---+
|                           |   |               |   
lb                          sm  lg              ub  
</programlisting>

<para>
  We're left with one unprocessed element.  It's large.  So we
  swap it with itself and decrease the large boundary.
</para>

<programlisting>
0   1   2   3   4   5   6   7   8   9   10  11  12  
+---+---+---+---+---+---+---+---+---+---+---+---+
|  h|  a|  c|  a|  a|  b|  e|  i|  t|  p|  l|  l|
+---+---+---+---+---+---+---+---+---+---+---+---+
|                           |                   |   
lb                          s,l                 ub  
</programlisting>

<para>
  Okay, we're finished rearranging the values.  Now we want
  to put the pivot in the middle.  So we swap it just to the
  left of the bounardy we created.
</para>

<programlisting>
0   1   2   3   4   5   6   7   8   9   10  11  12  
+---+---+---+---+---+---+---+---+---+---+---+---+
|  e|  a|  c|  a|  a|  b|  h|  i|  t|  p|  l|  l|
+---+---+---+---+---+---+---+---+---+---+---+---+
                         ***
</programlisting>

<para>
  We can now recurse on the two halves.
</para>

<para>
  You may have observed a few places in which we could have made our
  partition algorithm a bit more efficient.  And you should probably
  make those improvements - we chose a simple partitioning algorithm for
  clarity and to help ensure correctness.  Of course, if you do change
  the algorithm, you should make sure to analyze its correctness and to
  make sure you preserve the loop invariants.
</para>

</section> <!-- partitioning-revisited -->

<section id="quicksort-steps"><title>Continuing the Example</title>

<para>
  Let's continue the example above.  We started with the array
</para>

<programlisting>
0   1   2   3   4   5   6   7   8   9   10  11  12  
+---+---+---+---+---+---+---+---+---+---+---+---+
|  a|  l|  p|  h|  a|  b|  e|  t|  i|  c|  a|  l|
+---+---+---+---+---+---+---+---+---+---+---+---+
|                                               |   
lb                                              ub  
</programlisting>

<para>
  After partitioning, we ended up with
</para>


<programlisting>
0   1   2   3   4   5   6   7   8   9   10  11  12  
+---+---+---+---+---+---+---+---+---+---+---+---+
|  e|  a|  c|  a|  a|  b|  h|  i|  t|  p|  l|  l|
+---+---+---+---+---+---+---+---+---+---+---+---+
|                        ***                    |   
lb                                              ub  
</programlisting>

<para>
  What happens next?  We recurse on the left half.  (And we remember
  that we have to recurse on 7-12.)
</para>

<programlisting>
0   1   2   3   4   5   6   7   8   9   10  11  12  
+---+---+---+---+---+---+---+---+---+---+---+---+
|  e|  a|  c|  a|  a|  b|  h|  i|  t|  p|  l|  l|
+---+---+---+---+---+---+---+---+---+---+---+---+
|                       |*** 
lb                      ub
</programlisting>

<para>
  Suppose we pick <quote>c</quote> as the pivot.  After partitioning,
  we end up with the following.
</para>

<programlisting>
0   1   2   3   4   5   6   7   8   9   10  11  12  
+---+---+---+---+---+---+---+---+---+---+---+---+
|  a|  a|  b|  a|  c|  e|  h|  i|  t|  p|  l|  l|
+---+---+---+---+---+---+---+---+---+---+---+---+
|                ***    |*** 
lb                      ub
</programlisting>

<para>
  Once again, we recurse on the left half.  (We also remember that we have to
  process 5-6 when we're done, as well as the 7-12 from before.)
</para>

<programlisting>
0   1   2   3   4   5   6   7   8   9   10  11  12  
+---+---+---+---+---+---+---+---+---+---+---+---+
|  a|  a|  b|  a|  c|  e|  h|  i|  t|  p|  l|  l|
+---+---+---+---+---+---+---+---+---+---+---+---+
|               |***     *** 
lb              ub      
</programlisting>

<para>
  Suppose we pick one of the <quote>a</quote>'s as a pivot.  We partition.
</para>

<programlisting>
0   1   2   3   4   5   6   7   8   9   10  11  12  
+---+---+---+---+---+---+---+---+---+---+---+---+
|  a|  a|  a|  b|  c|  e|  h|  i|  t|  p|  l|  l|
+---+---+---+---+---+---+---+---+---+---+---+---+
|        ***    |***     *** 
lb              ub      
</programlisting>

<para>
  And we recurse once again.  We also remember that we have do deal with
  3-4 (and 5-6 and 7-12 from before).
</para>

<programlisting>
0   1   2   3   4   5   6   7   8   9   10  11  12  
+---+---+---+---+---+---+---+---+---+---+---+---+
|  a|  a|  a|  b|  c|  e|  h|  i|  t|  p|  l|  l|
+---+---+---+---+---+---+---+---+---+---+---+---+
|       |***     ***     *** 
lb      ub      
</programlisting>

<para>
  We pick one of the <quote>a</quote>'s as a pivot.  (Yes, you've
  probably noted a potential improvement already.)  And we partition.
</para>

<programlisting>
0   1   2   3   4   5   6   7   8   9   10  11  12  
+---+---+---+---+---+---+---+---+---+---+---+---+
|  a|  a|  a|  b|  c|  e|  h|  i|  t|  p|  l|  l|
+---+---+---+---+---+---+---+---+---+---+---+---+
|    ***|***     ***     *** 
lb      ub      
</programlisting>

<para>
  We recurse on the left half.  We also remember that we have to recurse on
  the right half, 2-2, as well as 3-4, 5-6, and 7-12.
</para>

<programlisting>
0   1   2   3   4   5   6   7   8   9   10  11  12  
+---+---+---+---+---+---+---+---+---+---+---+---+
|  a|  a|  a|  b|  c|  e|  h|  i|  t|  p|  l|  l|
+---+---+---+---+---+---+---+---+---+---+---+---+
|   |*** ***     ***     *** 
lb  ub  
</programlisting>

<para>
  It's a singleton element.  We know it's sorted.
</para>

<programlisting>
0   1   2   3   4   5   6   7   8   9   10  11  12  
+---+---+---+---+---+---+---+---+---+---+---+---+
|  a|  a|  a|  b|  c|  e|  h|  i|  t|  p|  l|  l|
+---+---+---+---+---+---+---+---+---+---+---+---+
|***|*** ***     ***     *** 
lb  ub  
</programlisting>

<para>
  The most recently recursion left undone is 2-2.  After that, we'll
  do 3-4, 5-6, and 7-12.
</para>

<programlisting>
0   1   2   3   4   5   6   7   8   9   10  11  12  
+---+---+---+---+---+---+---+---+---+---+---+---+
|  a|  a|  a|  b|  c|  e|  h|  i|  t|  p|  l|  l|
+---+---+---+---+---+---+---+---+---+---+---+---+
 *** ***|***     ***     *** 
        lb,ub
</programlisting>

<para>
  That's an empty array, so we're done.
</para>

<para>
  Now we do the subarray with indices 3-4.
</para>

<programlisting>
0   1   2   3   4   5   6   7   8   9   10  11  12  
+---+---+---+---+---+---+---+---+---+---+---+---+
|  a|  a|  a|  b|  c|  e|  h|  i|  t|  p|  l|  l|
+---+---+---+---+---+---+---+---+---+---+---+---+
 *** *** ***|   |***     *** 
            lb  ub
</programlisting>

<para>
  Another singleton array.  Done.
</para>

<programlisting>
0   1   2   3   4   5   6   7   8   9   10  11  12  
+---+---+---+---+---+---+---+---+---+---+---+---+
|  a|  a|  a|  b|  c|  e|  h|  i|  t|  p|  l|  l|
+---+---+---+---+---+---+---+---+---+---+---+---+
 *** *** *** *** ***     *** 
</programlisting>

<para>
  5-6 is equally trivial, so we won't even show it.  We're now
  left with 7-12.
</para>

<programlisting>
0   1   2   3   4   5   6   7   8   9   10  11  12  
+---+---+---+---+---+---+---+---+---+---+---+---+
|  a|  a|  a|  b|  c|  e|  h|  i|  t|  p|  l|  l|
+---+---+---+---+---+---+---+---+---+---+---+---+
 *** *** *** *** *** *** ***|                   |
                            lb                  ub
</programlisting>

<para>
  We pick a pivot and partition.  Let's say we pick <quote>p</quote>.
</para>

<programlisting>
0   1   2   3   4   5   6   7   8   9   10  11  12  
+---+---+---+---+---+---+---+---+---+---+---+---+
|  a|  a|  a|  b|  c|  e|  h|  l|  l|  i|  p|  t|
+---+---+---+---+---+---+---+---+---+---+---+---+
 *** *** *** *** *** *** ***|            ***    |
                            lb                  ub
</programlisting>

<para>
  And you can probably figure out the rest of the story.
</para>

</section> <!-- quicksort-steps -->

<section id="Quicksort-citations"><title>Citations</title>

<para>
  The first few sections of this reading are based closely on a reading
  from CSC 151.  My sense is that I'm the original author of that
  reading, since it seems to follow my normal style (and since I don't
  see Quicksort in the earlier versions of 151).  However, I am equally
  confident that Janet Davis and Jerod Weinman (and maybe Rhys Price
  Jones) helped improve that original reading.
</para>

<para>
  Quicksort was developed (discovered?) by C.A.R. Hoare.  There seem
  to be at least two early articles by Hoare on Quicksort.
</para>

<para>
  C. A. R. Hoare. 1961. Algorithm 64: Quicksort. <emphasis>Commun. ACM</emphasis> 4, 7 (July 1961), 321-. DOI=10.1145/366622.366644 <ulink url="http://doi.acm.org/10.1145/366622.366644"/>
</para>

<para>
  C. A. R. Hoare. 1962.  Quicksort.
  <emphasis>Comput. J.</emphasis> 5, 1, 10–16. doi:10.1093/comjnl/5.1.10
  <ulink url="http://comjnl.oxfordjournals.org/content/5/1/10.full.pdf"/>
</para>

</section> <!-- citations -->

</section> <!-- Quicksort-reading -->
