<section id="lists"><title>List ADTs</title>

<para>
  <emphasis>Summary</emphasis>: We consider ways to think about lists,
  which are among the simplest collections of values.
</para>

<section id="introduction"><title>Introduction</title>

<para>
  While abstract data types (ADTs) serve a variety of purposes, most 
  ADTs are used to store collections of values.  What distinguishes
  ADTs is how the ADT organizes and provides access to the elements in
  the collection.  We'll also see other issues, such as whether the
  ADT is homogeneous or heterogeneous, mutable or immutable, and
  dynamic or static.  But most of these additional design issues are
  secondary to the primary design question: How does the ADT organize
  and access the elements?
</para>

<para>
  <emphasis>Lists</emphasis> are conceptually among the simplest abstract
  data types.  In essence, a list is a collection of values that you can
  visit one by one, with the order in which the elements are visited
  is controlled by the client.
</para>

<para>
  How do clients control the order in which elements are visited?
  Typically, the instructions to add elements (and to remove elements,
  if removal is permitted) allow clients to clearly specify where in
  the list each new element goes.
</para>

</section> <!-- introduction -->

<section id="list-type"><title>What are we listing?  The <quote>type</quote> of a list</title>

<para>
  We now have a definition of list that suggests two primary operations:
  Clients should be able to <emphasis>add</emphasis> elements to lists
  (with control over positioning of elements) and clients should be able to
  <emphasis>visit</emphasis> elements of the list.  Figuring out how to
  express each of those operations is an interesting design issue, one
  that we will get to in a moment.  However, before looking at the
  details of these operations, let's consider a few of the design issues
  we raised above?
</para>

<para>
  <emphasis>What types does the list store?</emphasis>  Before you learned
  about writing generic data types, you probably would have picked a type:
  <quote>our lists will store strings</quote> or <quote>our lists will
  store integers</quote>.  You might also have thought about
  <emphasis>heterogeneous lists</emphasis>: <quote>our lists will store
  any type of values</quote>.  And, as you've seen, allowing collections
  to store multiple types of values can be useful.  And that utility
  should lead us to design <emphasis>heterogeneous lists</emphasis>.
</para>

<para>
  However, heterogeneity can cause us to lose important benefits of
  using Java.  In particular, many programmers use Java because Java
  provides compile-time type checking, and they know that compile-time
  type checking helps catch a lot of potential program bugs.  If our
  lists our heterogeneous, we need to do run-time type checking.  Hence,
  Java provides the <emphasis>generics</emphasis> that you've seen
  before.  If we parameterize our lists with the type of value they
  store, we can still write generic code, but we can support
  <emphasis>homogeneous lists</emphasis>.
</para>

<programlisting>
public interface MyList&lt;T&gt;
{
  ...
} // interface MyList&lt;T&gt;
</programlisting>

<para>
  What if our client wants heterogeneous lists?  That's one of the nice
  things about Java's generics: A list of <code>Object</code> values
  is heterogeneous as any Java value is either already an object or
  can be boxed into an object.
</para>

<para>
  Because the homogeneous/heterogeneous question is so nicely solved by
  Java's generics, we won't return to that design question again.  (You 
  should, however, revisit these issues if you're working in other languages
  or if other design decisions prevent you from using generics.)
</para>

<para>
  Of course, the question of whether lists should be homogeneous or
  heterogeneous is not the only question you should ask.  Let's move
  on to a few more.
</para>

</section> <!-- list-type -->

<section id="immutable-lists"><title>How should lists change?  Exploring Lisp Lists</title>

<para>
  A natural next question in the design of our list ADT might be
  <emphasis>Should lists be mutable or immutable?</emphasis>  It
  may be strange to think about immutable lists.  However, there
  are many situations in which it is convenient to make lists
  immutable.  You may want to ensure that the same sequence is used
  in every situation.  You may find that making lists immutable
  improves certain core operations.  You may just know that mutable
  structures lead to complexity in program design and analysis.
</para>

<para>
  It is certainly possible to think about lists as immutable
  structures.  In fact, Lisp, one of the earliest programming
  languages, provides lists that many programmers treat as immutable.
  (Lisp lists are mutable; the latest versions of Scheme, a popular
  descendant of Lisp, provides both mutable and immutable lists.)
</para>

<para>
  Let's start by exploring the immutable model in a little more
  depth.  Basic Lisp lists are built from a simple recursive definition of
  list.
</para>

<itemizedlist>
  <listitem>
    The empty list is a list.
  </listitem>
  <listitem>
    Adding an element to the front of a list produces a new list.
  </listitem>
</itemizedlist>

<para>
  How does that typically translate into methods?
</para>

<itemizedlist>
  <listitem>
    We need a constructor to build empty lists.  We might call
    this <methodname>empty</methodname> or we might just use a 
    zero-parameter constructor.  (It's hard to specify constructors
    in interfaces, so we might settle for <methodname>empty</methodname>.)
    We might also make a design decision that <code>null</code>
    represents the empty list, although that will likely make
    our code less object-oriented.
  </listitem>

  <listitem>
    We need a method to create a new value to the front of a list.
    We might have a method <methodname>prepend(T val)</methodname> or
    we might have a two parameter constructor.  Once again, it's
    hard to specify constructors in interfaces, so we'll stick
    with the method.
  </listitem>

  <listitem>
    We need a way to get the first element in a list.  Traditionally,
    the operation is called <methodname>car</methodname>, but we'll
    use the clearer <methodname>head</methodname>.
  </listitem>

  <listitem>
    We need a way to step through the list.  The tradition in Lisp
    is to have a method that returns everything but the front of the
    list.  Traditionally, the operation is called
    <methodname>cdr</methodname>, but we'll use the clearer
    <methodname>tail</methodname>.
  </listitem>

  <listitem>
    We need a way to determine if a list is empty.  We'll use
    <methodname>isEmpty</methodname>.
  </listitem>
</itemizedlist>

<para>
  Putting that all together, we get the following interface.
</para>

<programlisting>
/** 
 * Lists that follow the traditional Lisp/Scheme model.
 */
public interface LispList&lt;T&gt;
{
  /**
   * Create the empty list.
   */
  public LispList&lt;T&gt; empty();

  /**
   * Create a new list by prepending a new element to the front of
   * this list.
   *
   * @param val a value
   * @return lst list
   * @post
   *   lst.head() == val
   * @post
   *   lst.tail() == this
   */
  public LispList&lt;T&gt; prepend(T value);

  /**
   * Get the first element of the list.
   */
  public T head();

  /**
   * Get a list that contains all but the head of this list.
   */
  public LispList&lt;T&gt; tail();

  /**
   * Determine if the list is empty.
   */
  public boolean isEmpty();
} // interface LispList&lt;T&gt;
</programlisting>

<para>
  With these methods, it's relatively straightforward to iterate through
  the elements of a list.  Here's a simple procedure that prints the
  elements of a list, one by one.
</para>

<programlisting>
   /**
    * Print all the elements in a list.
    */
   public static &lt;T&gt; void printList(PrintWriter pen, LispList&lt;T&gt; lst)
   {
     while (!lst.isEmpty())
       { 
         pen.println(lst.head());
         lst = lst.tail();
       } // while
   } // printList(PrintWriter, LispList&lt;T&gt;)
</programlisting>

<para>
  Of course, in addition to iterating lists, we need to provide a
  way for clients to control the order of elements in the list. 
  And they can do so by building the list from back to front.  Rearranging
  the elements involves building new lists, but it's not that hard.  
  For example, if we have the list <code>[a, b, c]</code> and want to
  replace the <code>b</code> with some new value, we might do 
  something like the following:
</para>

<programlisting>
  newlst = lst.tail().tail().prepend(newval).prepend(lst.head());
</programlisting>

<para>
  Are there other methods we could include in the interface?
  Certainly.  We might want methods that get the ith element of a
  list, that reverse a list, that extract sublists, that replace
  elements of the list, and so on and
  so forth.  However, we are striving to start with minimalist
  interfaces, so we'll start with the five basic methods.
</para>

<para>
  While Lisp lists are conceptually simple, they also have some
  significant drawbacks.  For example, there are many problems
  in which you want to change the elements of the list without
  building a new list.  For example, we might be concerned with
  the storage requirements of our lists.  In addition, Lisp Lists
  are closely tied to a particular implementation, one involving
  simple structures that link together the front of the list and the
  rest of the list.  In practice, we might like the freedom to 
  choose between implementations.  Hence, while Lisp lists
  were a useful detour, we will continue our exploration by
  designing an ADT for mutable lists.
</para>

</section> <!-- immutable-lists -->

<section id="methods"><title>Categories of Methods</title>

<para>
  We've now made two major design decisions: Our list ADT will use
  generics so that we can support homogeneous lists of various types
  and our list ADT will support mutation.  These decisions, along with
  our overall philosophy that lists are iterable collections, suggest
  four basic categories of methods.
</para>

<itemizedlist>
  <listitem>
    We need methods that the client can use to <emphasis>add</emphasis>
    elements to the list.
  </listitem>

  <listitem>
    We need methods that the client can use to <emphasis>remove</emphasis>
    elements from the list.  (We might also choose to make these methods
    optional.)
  </listitem>

  <listitem>
    We might want methods that the client can use to
    <emphasis>replace</emphasis> elements of the list.  Why not just use
    the methods to add and remove elements?  Because it might be much
    more efficient to replace elements.  (Again, we might choose to make
    this methods optional.)
  </listitem>

  <listitem>
    We need methods to <emphasis>iterate</emphasis> through the elements 
    of the list.
  </listitem>
</itemizedlist>

<para>
  For the first two categories of methods, we might just allow
  people to work at the front and back of the list, generalizing
  the design of Lisp lists, although in a more mutable form.  But
  it is clearly more useful to indicate <emphasis>positions</emphasis>
  in the list.  That is, we might say that we want to remove an element
  at a particular position, or to add an element at, before, or after
  that position.
</para>

<para>
  But how should we represent positions?  There are a variety of
  approaches that designers use.  We'll consider each, and then
  explore Java's standard technique.
</para>

</section> <!-- methods -->

<section id="positions"><title>Positions - Numeric and Generalize</title>

<para>
  Most programmers start by thinking of positions as numbers.
  <quote>I want to be able to remove the element at position 5.</quote>
  In some ways, that design works well.  Numbers are easy for people 
  to understand, and most programmers are used to the numeric positions
  in arrays.
</para>

<para>
  But there are also some significant disadvantages to using numeric
  positions in arrays.  First, the semantics can be difficult.  For
  example, what does it mean to remove the element at position
  5?  Do we end up with nothing there?  Does everything shift left?
  Can we only remove at a position when it's the beginning or end?
  What happens to the other positions?  And so on and so forth.  As
  importantly, using numbers can bias the implementation: There are
  implementations of lists, such as Lisp Lists, in which using numbers
  as positions leads to some inefficient implementations.
</para>

<para>
  It's also good practice to look at ways to generalize things.
  Hence, rather than saying <quote>positions are integers</quote>,
  we can say <quote>we use position</quote>, and allow implementors
  to decide what form of position is best.  If we choose this 
  approach, we might first define a <code>Position</code> interface.
</para>

<programlisting>
public interface Position
{
} // interface Position
</programlisting>

<para>
  Now, in our <code>MutableList</code> interface, we can use these
  values.
</para>

<programlisting>
public interface MutableList&lt;T&gt;
{
  ...

  /**
   * Get the value at a particular position.
   */
  public T get(Position pos);

  /**
   * Remove the element at a particular position.
   *
   * @pre the position is valid
   */
  public void remove(Position pos);

  /**
   * Determine if a position is valid.
   */
  public void isValid(Position pos);

  ...
} // interface Mu&lt;T&gt;tableList
</programlisting>

<para>
  How do we use positions?  That is, how do we get a position in the
  middle of the list?  One option is to have the list interface
  provide mechanisms for dealing with positions.
</para>

<programlisting>
public interface MutableList&lt;T&gt;
{
  ...

  /**
   * The front of the list
   */
  public Position front();

  /**
   * Get the position that immediately follows pos.
   *
   * @pre pos is not at the end of the list.
   */
   public Position next(Position pos);

  /**
   * Determine if a position is at the end of the list.
   */
  public boolean atEnd(Position pos);

  ...
} // interfaceMutableList&lt;T&gt;
</programlisting>

<para>
  We now have enough methods that we can iterate lists, as well
  as mutate them.
</para>

<programlisting>
  public static &lt;T&gt; void printList(PrintWriter pen, MutableList&lt;T&gt; lst)
  {
    Position here = lst.front();
    while (!lst.atEnd(here))
      {
        pen.println(lst.get(here));
        here = list.next(here);
      } // while
  } // printList(PrintWriter, MutableList&lt;T&gt;)
</programlisting>

</section> <!-- positions -->

<section id="current"><title>Lists with a Current Element</title>

<para>
  Some designers (including the designers of textbooks) decide that
  rather than having a separate position type, they'll just keep track
  of the <quote>current</quote> element of the list.
</para>

<programlisting>
public interface MutableListWithCurrent&lt;T&gt;
{
  ...

  /**
   * Get the current element.
   */
  public T get();

  /**
   * Advance to the next element.
   */
  public void next();

  /**
   * Reset to the beginning of the list.
   */
  public void reset();

  /**
   * Determine if we've reached the end of the list.
   */
  public boolean atEnd();

  ...
} // interface MutableListWithCurrent&lt;T&gt;
</programlisting>

<para>
  With this interface, it's equally easy to iterate lists.
</para>

<programlisting>
  public static &lt;T&gt; void printList(PrintWriter pen, MutableListWithCurrent&lt;T&gt; lst)
  {
    lst.reset();
    while (!lst.atEnd())
      {
        pen.println(lst.get());
        lst.next();
      } // while
  } // printList(PrintWriter, MutableListWithCurrent&lt;T&gt;
</programlisting>

<para>
  It all sounds great, doesn't it?  But, as Joseph Bergin suggests in
  <ulink url="http://csis.pace.edu/~bergin/papers/ListsWithCurrent.html">Lists
  with Current Considered Harmful</ulink>, it's not a very good design.
  For example, if we have more than one subprogram that's interacting with a
  list, each might have its own notion of the current position.  And, if
  we're sorting a list in place, we will almost certainly need to keep track
  of positions.  Hence, our lists will not have a current element.
</para>

</section> <!-- current -->

<section id="cursors"><title>List Cursors</title>

<para>
  You may have found the position interface a bit puzzling.  After all,
  why are we having one object (the list) do all the work with another
  object (the position).  Wouldn't it make more sense to have the object
  that we're getting information about do all the work?  Alternately,
  might we generalize the notion of <quote>current</quote>.
</para>

<para>
  I've found it useful to think of a <quote>cursor</quote> that we
  move through the list.  Once we create a cursor, we can get the value
  at the cursor and move the cursor, and we leave the list implicit.
</para>

<programlisting>
public interface ListCursor&lt;T&gt;
{
  /**
   * Get the current element.
   *
   * @pre
   *   This cursor is valid.
   */
  public T get();

  /**
   * Advance to the next element.
   *
   * @pre
   *   The cursor is not at the end of the list.
   */
  public void next();

  /**
   * Determine if the cursor is valid.
   */
  public boolean isValid();

  /**
   * Determine if the cursor is at the end of the list.
   */
  public boolean atEnd();
} // interface ListCursor&lt;T&gt;

public interface BidirectionalListCursor&lt;T&gt;
{
  /**
   * Retreat to the previous element.
   * 
   * @pre
   *   The cursor is not at the beginning of the list.
   */
   public void prev();

   /**
    * Determine if the cursor is at the beginning of the list.
    */
   public boolean atFront();
} // interface BidirectionalListCursor&lt;T&gt;

public interface MutableList&lt;T&gt;
{
  ...

  /**
   * Get a cursor for the front of the list.
   */
  public ListCursor&lt;T&gt; front();

  ...
} // MutableList&lt;T&gt;
</programlisting>

<para>
  Once again, it's easy to iterate using this design.
</para>

<programlisting>
  public static &lt;T&gt; void printList(PrintWriter pen, MutableList&lt;T&gt; lst)
  {
    Cursor here = lst.front();
    while (!here.atEnd())
      {
        pen.println(here.get());
        here.next();
      } // while
  } // printList(PrintWriter, MutableList&lt;T&gt;)
</programlisting>

<para>
  How do we use these cursors for adding or removing elements?  Here's
  a case in which we might make the cursor a parameter to the method.
</para>

<programlisting>
public interface MutableList&lt;T&gt;
{
  ...

  /**
   * Add an element immediately after the cursor.
   *
   * @pre
   *   The cursor was created by this list.
   * @pre
   *   The cursor remains valid.
   */
  public void addAfter(T val, ListCursor&lt;T&gt; cursor);
  
  ...
} // MutableList&lt;T&gt;
</programlisting>

<para>
  All seems well and good, doesn't it?  However, given your experience with
  the other designs above, you're probably waiting for a criticism.
  Believe it or not; I don't have one.  When I design my own list interfaces,
  I tend to include some form of cursor.  Of course, there are still
  a host of design decisions: Do we allow cursor to retreat?  What 
  methods do we support for adding and removing elements?  And so on
  and so forth.
</para>

</section> <!-- cursors -->

<section id="iterators"><title>Iterators</title>

<para>
  While cursors provide a wonderful strategy for iterating lists, and
  one that I recommend, it's also useful to know what the designers of
  Java came up with.  In Java, clients iterate lists with objects that
  are in the class <code>java.util.Iterator</code>.  Iterators are much
  like cursors, in the sense that you can build multiple iterators for
  a list, that you use them to get and advance, and that you can use
  them to add and remove elements.  The differences are in the particular
  decisions.
</para>

<para>
  First, Java's iterators combine our <methodname>get</methodname> and
  <methodname>next</methodname> method.  That is, when you call
  <methodname>next</methodname>, you get the next unvisited value
  <emphasis>and</emphasis> you advance beyond that value.
</para>

<para>
  Second, Java's iterators use <methodname>hasNext</methodname> to
  indicate whether or not we've reached the end of the list.  (Hey,
  it's just a name.)
</para>

<para>
  Third, interfaces and classes that provide iterators traditionally
  do so with an <methodname>iterator</methodname> method and indicate
  that they implement the <methodname>Iterable&lt;T&gt;</methodname>
  interface.
</para>

<para>
  Given those design decisions, iteration is easy.
</para>

<programlisting>
  public static &lt;T&gt; void printList(PrintWriter pen, MutableList&lt;T&gt; lst)
  { 
    Iterator&lt;T&gt; it = lst.iterator();
    while (lst.hasNext())
      {
        pen.println(lst.next());
      } // while
  } // printList(PrintWriter, MutableList&lt;T&gt;)
</programlisting>

<para>
  In fact, this pattern is so common that Java provides a syntax
  for iterating any class that implements
  <methodname>Iterator</methodname>.  One can use <code>for
  (<varname>variable</varname> : <varname>collection</varname>)</code>
  to set <varname>variable</varname> to each element of
  <varname>collection</varname> in turn.  For example,
</para>

<programlisting>
  public static &lt;T&gt; void printList(PrintWriter pen, MutableList&lt;T&gt; lst)
  { 
    for (T val : lst)
      pen.println(val);
  } // printList(PrintWriter, MutableList&lt;T&gt;)
</programlisting>

<para>
  It's almost not worth writing the function any more.
</para>

<para>
  But iterators differ from cursors in other important ways, too.
  You may recall that we made cursors parameters to list methods that
  mutate the list.  Iterators, on the other hand, expect that you will
  use the iterator to mutate the underlying list.
</para>

<para>
  For reasons that I don't completely understand, iterators provide
  only an optional <methodname>remove</methodname> method which removes
  the value most recently returned by <methodname>next</methodname>
</para>

<programlisting>
package java.util;

public interface Iterator&lt;T&gt;
{
  ...

  /**
   * Remove the last element returned by next.
   */
  public void remove()
    throws UnsupportedOperationException, IllegalStateException;
} // interface Iterator&lt;T&gt;
</programlisting>

<para>
  That's right.  The implementor can indicate that the
  <methodname>remove</methodname> method is not available by throwing
  an exception.  Clearly, whoever designed this interface was not
  sold on compile-time type checking.
</para>

<para>
  What happens if we decide to call <methodname>remove</methodname>
  twice in a row, without a call to <methodname>next</methodname> in
  between?  The semantics of <methodname>remove</methodname> are
  such that such a sequence of calls is considered invalid, and hence
  should be avoided.
</para>

<para>
  What if we want to add a value?  It turns out that the Java
  designers didn't think addition was as important as removal.
  Hence, <methodname>add</methodname> is part of a subinterface called
  <methodname>ListIterator</methodname>.  The <methodname>add</methodname>
  method adds a value immediately before the last element added by
  <methodname>next</methodname>.  List iterators also provide a
  <methodname>prev</methodname> that allows us to back up in the
  list.  Finally, for no clear reason, list iterators also provides
  two methods that grab the index of the next or previous element,
  <methodname>nextIndex</methodname> and
  <methodname>prevIndex</methodname>.
</para>

</section> <!-- iterators -->

<section id="lists-concluded"><title>Putting it Together</title>

<para>
  Where are we?  We've considered a wide variety of design issues
  that one might consider while designing a list ADT.  We ended up
  deciding that most of the work in a list can be done through the
  <code>ListIterator</code> interface.  Putting it all together,
  this is what we seem to get.
</para>

<programlisting>
/**
 * Very simple lists.
 */
public interface SimpleList&lt;T&gt;
  extends Iterable&lt;T&gt;
{
  public Iterator&lt;T&gt; iterator();
  public ListIterator&lt;T&gt; listIterator();
} // interface SimpleList&lt;T&gt;
</programlisting>

<para>
  Where are all the details?  They're in the
  <code>ListIterator</code> interface.  We'll consider the details
  in the next reading.
</para>

</section> <!-- lists-concluded -->

</section> <!-- lists -->
